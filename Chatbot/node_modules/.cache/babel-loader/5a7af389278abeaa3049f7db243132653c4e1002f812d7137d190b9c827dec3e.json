{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\karup\\\\OneDrive\\\\Desktop\\\\Chatbot\\\\src\\\\components\\\\ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Message from './Message';\nimport Input from './Input';\nimport axios from 'axios';\nimport './ChatBox.css'; // Import the CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const apiKey = \"AIzaSyBUY_PDKM3Vbl6R-NYbbO_23pkjncrXc6E\"; // Use your API key\n\n  const sendMessage = async message => {\n    const userMessage = {\n      text: message,\n      sender: 'You'\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setLoading(true);\n    try {\n      var _response$data, _response$data$candid, _response$data$candid2, _response$data$candid3, _response$data$candid4, _response$data$candid5;\n      const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`, {\n        contents: [{\n          parts: [{\n            text: message\n          }]\n        }]\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Response Status:', response.status);\n      console.log('Response Data:', response.data);\n      const botMessage = {\n        text: ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$candid = _response$data.candidates) === null || _response$data$candid === void 0 ? void 0 : (_response$data$candid2 = _response$data$candid[0]) === null || _response$data$candid2 === void 0 ? void 0 : (_response$data$candid3 = _response$data$candid2.content) === null || _response$data$candid3 === void 0 ? void 0 : (_response$data$candid4 = _response$data$candid3.parts) === null || _response$data$candid4 === void 0 ? void 0 : (_response$data$candid5 = _response$data$candid4[0]) === null || _response$data$candid5 === void 0 ? void 0 : _response$data$candid5.text) || 'No response from Gemini',\n        sender: 'Bot'\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Error fetching data from API:', error);\n      const errorMessage = error.response ? `Error: ${error.response.data.message}` : 'Error: Unable to reach Gemini API';\n      setMessages(prev => [...prev, {\n        text: errorMessage,\n        sender: 'System'\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: msg.text,\n        sender: msg.sender\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)), loading && /*#__PURE__*/_jsxDEV(Message, {\n        text: \"Thinking...\",\n        sender: \"Gemini\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      sendMessage: sendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"hq4AwCU/cjqbSZgH8tz5GrloLy8=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","Message","Input","axios","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","loading","setLoading","apiKey","sendMessage","message","userMessage","text","sender","prev","_response$data","_response$data$candid","_response$data$candid2","_response$data$candid3","_response$data$candid4","_response$data$candid5","response","post","contents","parts","headers","console","log","status","data","botMessage","candidates","content","error","errorMessage","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/karup/OneDrive/Desktop/Chatbot/src/components/ChatBox.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Message from './Message';\r\nimport Input from './Input';\r\nimport axios from 'axios';\r\nimport './ChatBox.css'; // Import the CSS file for styling\r\n\r\nconst ChatBox = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const apiKey = \"AIzaSyBUY_PDKM3Vbl6R-NYbbO_23pkjncrXc6E\"; // Use your API key\r\n\r\n  const sendMessage = async (message) => {\r\n    const userMessage = { text: message, sender: 'You' };\r\n    setMessages((prev) => [...prev, userMessage]);\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`,\r\n        {\r\n          contents: [\r\n            {\r\n              parts: [\r\n                {\r\n                  text: message,\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      console.log('Response Status:', response.status);\r\n      console.log('Response Data:', response.data);\r\n\r\n      const botMessage = {\r\n        text: response.data?.candidates?.[0]?.content?.parts?.[0]?.text || 'No response from Gemini',\r\n        sender: 'Bot',\r\n      };\r\n\r\n      setMessages((prev) => [...prev, botMessage]);\r\n    } catch (error) {\r\n      console.error('Error fetching data from API:', error);\r\n      const errorMessage = error.response\r\n        ? `Error: ${error.response.data.message}`\r\n        : 'Error: Unable to reach Gemini API';\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { text: errorMessage, sender: 'System' },\r\n      ]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbox\">\r\n      <div className=\"messages\">\r\n        {messages.map((msg, index) => (\r\n          <Message key={index} text={msg.text} sender={msg.sender} />\r\n        ))}\r\n        {loading && <Message text=\"Thinking...\" sender=\"Gemini\" />}\r\n      </div>\r\n      <Input sendMessage={sendMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}